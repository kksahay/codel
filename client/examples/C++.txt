#include <iostream>
#include <string>
#include <boost/asio.hpp>

using namespace boost::asio;

class HTTPServer {
public:
    HTTPServer(io_service& io_service, int port)
        : acceptor_(io_service, ip::tcp::endpoint(ip::tcp::v4(), port)) {
        do_accept();
    }

private:
    void do_accept() {
        acceptor_.async_accept(socket_, [this](boost::system::error_code ec) {
            if (!ec) {
                std::make_shared<HTTPSession>(std::move(socket_))->start();
            }
            do_accept();
        });
    }

    ip::tcp::acceptor acceptor_;
    ip::tcp::socket socket_;
};

class HTTPSession : public std::enable_shared_from_this<HTTPSession> {
public:
    HTTPSession(ip::tcp::socket socket) : socket_(std::move(socket)) {}

    void start() {
        do_read();
    }

private:
    void do_read() {
        auto self(shared_from_this());
        socket_.async_read_some(buffer(data_, max_length),
            [this, self](boost::system::error_code ec, std::size_t length) {
                if (!ec) {
                    do_write(length);
                }
            });
    }

    void do_write(std::size_t length) {
        auto self(shared_from_this());
        async_write(socket_, buffer(data_, length),
            [this, self](boost::system::error_code ec, std::size_t) {
                if (!ec) {
                    do_read();
                }
            });
    }

    ip::tcp::socket socket_;
    enum { max_length = 1024 };
    char data_[max_length];
};

int main() {
    try {
        io_service io_service;
        HTTPServer server(io_service, 8080);
        io_service.run();
    } catch (std::exception& e) {
        std::cerr << "Exception: " << e.what() << std::endl;
    }

    return 0;
}